import os
from tkinter import *
from tkinter import ttk
import boto3

def click():
    entered_text = textentry.get()
    if entered_text == "1":
        window = Tk()
        window.geometry("1600x900")
        window.title("AWS")
        window.configure(background="red")
        Label(window, text="\nWELCOME TO AWS!", width=60, bg="red", fg="black", font="verdana 30 italic").grid(row=1, column=0, sticky='W')
        Label(window,text="\n\n\nEnter you choice:", width=60, bg="red", fg="black", font="verdana 30 italic").grid(row=7, column=0, sticky='W')
        Button(window, text="deploy machine", width=14, command=first_aws, font="none 12 italic").grid(row=11, column=0, sticky=S)
        Button(window, text="delete machine", width=14, command=second_aws, font="none 12 italic").grid(row=12, column=0, sticky=S)
        Button(window, text="stop machine", width=14, command=third_aws, font="none 12 italic").grid(row=13, column=0, sticky=S)
        Button(window, text="start machine", width=14, command=fourth_aws, font="none 12 italic").grid(row=14, column=0, sticky=S)
        Button(window, text="print machines", width=14, command=fifth_aws, font="none 12 italic").grid(row=15, column=0, sticky=S)
        Button(window, text="EXIT", width=14, command=close_window, font="none 12 italic").grid(row=16, column=0, sticky=S)
    elif entered_text == "2":
        window = Tk()
        window.geometry("1600x900")
        window.title("MONITORING")
        window.configure(background="purple")
        Label(window, text="\n\nWELCOME TO MONITORING!", width=60, bg="purple", fg="yellow", font="verdana 30 italic").grid(row=1, column=0, sticky='W')
        Label(window,text="\n\n\nEnter you choice:\n", width=60, bg="purple", fg="yellow", font="verdana 30 italic").grid(row=7, column=0, sticky='W')
        Button(window, text="install nagios", width=14, command=first_mon, font="none 12 italic").grid(row=11, column=0, sticky=S)
        Button(window, text="delete nagios", width=14, command=second_mon, font="none 12 italic").grid(row=12, column=0, sticky=S)
        Button(window, text="configure", width=14, command=third_mon, font="none 12 italic").grid(row=13, column=0, sticky=S)
        Button(window, text="EXIT", width=14, command=close_window, font="none 12 italic").grid(row=16, column=0, sticky=S)
    elif entered_text == "3":
        window = Tk()
        window.geometry("1600x900")
        window.title("DOCKER")
        window.configure(background="blue")
        Label(window, text="\n\nWELCOME TO DOCKER!", width=60, bg="blue", fg="white", font="verdana 30 italic").grid(row=1, column=0, sticky='W')
        Label(window,text="\n\n\nEnter you choice:\n", width=60, bg="blue", fg="white", font="verdana 30 italic").grid(row=7, column=0, sticky='W')
        Button(window, text="install docker", width=14, command=first_doc, font="none 12 italic").grid(row=11, column=0, sticky=S)
        Button(window, text="create container", width=14, command=second_doc, font="none 12 italic").grid(row=12, column=0, sticky=S)
        Button(window, text="pull images", width=14, command=third_doc, font="none 12 italic").grid(row=13, column=0, sticky=S)
        Button(window, text="stop/start containers", width=16, command=fourth_doc, font="none 12 italic").grid(row=14, column=0, sticky=S)
        Button(window, text="delete images", width=14, command=fifth_doc, font="none 12 italic").grid(row=15, column=0, sticky=S)
        Button(window, text="check containers", width=14, command=sixth_doc, font="none 12 italic").grid(row=16, column=0, sticky=S)
        Button(window, text="EXIT", width=14, command=close_window, font="none 12 italic").grid(row=17, column=0, sticky=S)
    elif entered_text == "4":
        window = Tk()
        window.geometry("1600x900")
        window.title("INIT-SERVER")
        window.configure(background="white")
        Label(window, text="\n\nWELCOME TO INIT-SERVER!", width=60, bg="white", fg="black", font="verdana 30 italic").grid(row=1, column=0, sticky='W')
        Label(window,text="\n\n\nEnter you choice:\n", width=60, bg="white", fg="black", font="verdana 30 italic").grid(row=7, column=0, sticky='W')
        Button(window, text="nmap server", width=14, command=first_ser, font="none 12 italic").grid(row=11, column=0, sticky=S)
        Button(window, text="installations", width=14, command=second_ser, font="none 12 italic").grid(row=12, column=0, sticky=S)
        Button(window, text="ssh key-gen", width=14, command=third_ser, font="none 12 italic").grid(row=13, column=0, sticky=S)
        Button(window, text="hostname", width=16, command=fourth_ser, font="none 12 italic").grid(row=14, column=0, sticky=S)
        Button(window, text="EXIT", width=14, command=close_window, font="none 12 italic").grid(row=16, column=0, sticky=S)
    elif entered_text == "5":
        window = Tk()
        window.geometry("1600x900")
        window.title("ANSIBLE")
        window.configure(background="red")
        Label(window, text="\nWELCOME TO ANSIBLE!", width=60, bg="red", fg="yellow", font="verdana 30 italic").grid(row=1, column=0, sticky='W')
        Label(window,text="\n\n\nEnter you choice:", width=60, bg="red", fg="yellow", font="verdana 30 italic").grid(row=7, column=0, sticky='W')
        Button(window, text="install ansible", width=14, command=first_ans, font="none 12 italic").grid(row=11, column=0, sticky=S)
        Button(window, text="create group", width=14, command=second_ans, font="none 12 italic").grid(row=12, column=0, sticky=S)
        Button(window, text="install packages", width=14, command=third_ans, font="none 12 italic").grid(row=13, column=0, sticky=S)
        Button(window, text="start + enable service", width=20, command=fourth_ans, font="none 12 italic").grid(row=14, column=0, sticky=S)
        Button(window, text="print storage+memory", width=20, command=fifth_ans, font="none 12 italic").grid(row=15, column=0, sticky=S)
        Button(window, text="EXIT", width=14, command=close_window, font="none 12 italic").grid(row=16, column=0, sticky=S)
    else:
        window = Tk()
        window.geometry("1600x900")
        window.title("ERROR")
        window.configure(background="red")
        Label(window, text="\nchoose number between 1-5 only!! press X to come back to the menu", width=60, bg="red", fg="black", font="verdana 30 italic").grid(row=1, column=0, sticky='W')

def first_ans():
    os.system('sudo apt update')
    os.system('sudo apt install software-properties-common')
    os.system('sudo apt-add-repository--yes--update ppa:ansible/ansible')
    os.system('sudo apt install ansible')
    window.destroy()
    exit()
def second_ans():
    print("please add your group in this python script")
    os.system('sudo nano /etc/ansible/hosts')
    print("lets check if it works...")
    group=input("enter your ansible group:\n")
    os.system('ansible -m ping ' + group)
    window.destroy()
    exit()
def third_ans():
    group = input("enter your ansible group:\n")
    print("lets install the package:\n")
    print("lets install python3.7")
    os.system('ansible ' + group + ' -b -m yum -a `name=python3.7 state=latest`')
    print("lets install net-tools")
    os.system('ansible ' + group + ' -b -m yum -a `name=net-tools state=latest`')
    print("lets install ssh")
    os.system('ansible ' + group + ' -b -m yum -a `name=ssh state=latest`')
    print("lets install java")
    os.system('ansible ' + group + ' -b -m yum -a `name=default-jre state=latest`')
    os.system('ansible ' + group + ' -b -m yum -a `name=default-jdk state=latest`')
    print("lets install curl")
    os.system('ansible ' + group + ' -b -m yum -a `name=curl state=latest`')
    print("lets install tcpdump")
    os.system('ansible ' + group + ' -b -m yum -a `name=dcpdump state=latest`')
    print("lets install docker")
    os.system('sudo nano install-docker-playbook.yml')
    os.system('ansible-playbook install-docker-playbook.yml -l remote')
    print("done!")
    window.destroy()
    exit()
def fourth_ans():
    group = input("enter your ansible group:\n")
    os.system('ansible ' + group + ' -b -m service -a `name=python3.7 state=started`')
    os.system('ansible ' + group + ' -b -m service -a `name=net-tools state=started`')
    os.system('ansible ' + group + ' -b -m service -a `name=ssh state=started`')
    os.system('ansible ' + group + ' -b -m service -a `name=javac state=started`')
    os.system('ansible ' + group + ' -b -m service -a `name=curl state=started`')
    os.system('ansible ' + group + ' -b -m service -a `name=dcpdump state=started`')
    os.system('ansible ' + group + ' -b -m service -a `name=docker state=started`')
    window.destroy()
    exit()
def fifth_ans():
    group = input("enter your ansible group:\n")
    os.system('ansible ' + group + ' -m command -a `free -h`')
    os.system('ansible ' + group + ' -m command -a `df -h`')
    window.destroy()
    exit()
def first_ser():
    os.system('sudo apt-get install nmap')
    ip = input("enter your local ip address+SM: (for example: 192.168.1.0/24)\n")
    print("check all the ips in network...\n")
    os.system('nmap -v -sn ' + ip)
    window.destroy()
    exit()
def second_ser():
    print("lets install the package:\n")
    print("lets install python3.7")
    os.system('sudo apt update')
    os.system('sudo apt install software-properties-common')
    os.system('sudo add-apt-repository ppa:deadsnakes/ppa')
    os.system('sudo apt install python3.7')
    os.system('python3.7 --version')
    print("lets install net-tools")
    os.system('sudo apt update')
    os.system('sudo apt install net-tools')
    print("lets install ssh")
    os.system('sudo apt-get update')
    os.system('sudo apt install openssh-server')
    os.system('sudo systemctl status ssh')
    print("lets install java")
    os.system('sudo apt update')
    os.system('sudo apt install default-jre')
    os.system('sudo apt install default-jdk')
    os.system('javac -version')
    print("lets install curl")
    os.system('sudo apt update')
    os.system('sudo apt upgrade')
    os.system('sudo apt install curl')
    os.system('curl --version')
    print("lets install tcpdump")
    os.system('sudo apt-get update -y')
    os.system('sudo apt-get install -y tcpdump')
    print("lets install docker")
    os.system('curl -fsSL https://get.docker.com -o get-docker.sh')
    os.system('sh get-docker.sh -y')
    window.destroy()
    exit()
def third_ser():
    print("creating new ssh key:")
    os.system('ssh-keygen -t rsa')
    print("done lets copy id key")
    name=input("enter the machine's name you want to copy:\n")
    ip=input("enter the machine's ip you want to copy:\n")
    os.system('ssh-copy-id ' + name+ '@'+ ip)
    print("done!")
    window.destroy()
    exit()
def fourth_ser():
    print("lets change your hostname...\n")
    os.system('sudo apt-get install systemd -y')
    new_hostname = input("enter your new hostname:\n")
    os.system('sudo hostnamectl set-hostname ' + new_hostname)
    os.system('hostnamectl')
    print("this is your new hostname:\n")
    os.system('hostname')
    window.destroy()
    exit()
def first_doc():
    print("lets install docker!")
    os.system('curl -fsSL https://get.docker.com -o get-docker.sh')
    os.system('sh get - docker.sh - y')
    print("docker has installed!")
    window.destroy()
    exit()
def second_doc():
    root=input("which root do you want to use?\n")
    type = input("which type of container do you want to crete?\n")
    if type == "dockerui":
        os.system('sudo docker pull abh1nav / dockerui: latest')
        os.system('sudo docker run - d - p ' + root + ': 9000 - v / var / run / docker.sock: / docker.sock - -name dockerui abh1nav / dockerui: latest - e = "/docker.sock"')
        print("done")
    else:
        os.system('sudo docker run - d - p ' + root +': 8080 '+ type)
        print("done!")
    os.system('sudo docker ps -a')
    window.destroy()
    exit()
def third_doc():
    image=input("which kind of image do you want to download?\n")
    print("this is the available images:")
    os.system('sudo docker search ' + image)
    id=input("which image's ID do you want to download?\n")
    os.system('sudo docker pull ' + id)
    print("DONE!")
    os.system('sudo docker images')
    window.destroy()
    exit()
def fourth_doc():
    id = input("which container's ID do you want to use?\n")
    container=input("Do you want to start/stop container?\n")
    if container=="start":
        os.system('sudo docker start ' + id)
        os.system('sudo docker ps')
    elif container=="start":
        os.system('sudo docker stop ' + id)
        os.system('sudo docker ps -a')
    window.destroy()
    exit()

def fifth_doc():
    print("There are the existing images:")
    os.system('sudo docker images')
    id=input("Enter the image's id you want to remove:\n")
    os.system('sudo docker rmi '+ id)
    print("done!")
    os.system('sudo docker images')
    window.destroy()
    exit()
def sixth_doc():
    print("lets see all the containers:\n")
    os.system('sudo docker ps -a')
    window.destroy()
    exit()

def first_mon():
    print("downloading nagion")
    os.system('sudo apt-get update -y')
    os.system('sudo apt-get install wget build-essential unzip openssl libssl-dev')
    os.system('sudo apt-get install apache2 php libapache2-mod-php php-gd libgd-dev')
    print("creating new username that name nagios")
    print("creating new group that name nagcmd")
    os.system('sudo adduser nagios')
    os.system('sudo addgroup nagcmd')
    os.system('sudo usermod -a -G nagcmd nagios')
    os.system('sudo usermod -a -G nagcmd www-data')
    os.system('cd /opt/')
    os.system('wget https://assets.nagios.com/downloads/nagioscore/releases/nagios-4.4.5.tar.gz')
    os.system('tar xzf nagios-4.4.5.tar.gz')
    os.system('sudo ./configure --with-command-group=nagcmd')
    os.system('sudo make all')
    os.system('sudo make install')
    os.system('sudo make install-init')
    os.system('sudo make install-daemoninit')
    os.system('sudo make install-config')
    os.system('sudo make install-commandmode')
    os.system('sudo make install-exfoliation')
    os.system('cp -R contrib/eventhandlers/ /usr/local/nagios/libexec/')
    os.system('chown -R nagios:nagios /usr/local/nagios/libexec/eventhandlers')
    print("now creating an apache configuration file...")
    os.system('sudo htpasswd -c /usr/local/nagios/etc/htpasswd.users nagiosadmin')
    os.system('sudo a2enconf nagios')
    os.system('sudo a2enconf cgi rewrite')
    os.system('sudo service apache2 restart')
    print("installing nagios plugins...")
    os.system('cd /opt')
    os.system('wget http://www.nagios-plugins.org/download/nagios-plugins-2.2.1.tar.gz')
    os.system('tar xzf nagios-plugins-2.2.1.tar.gz')
    os.system('cd nagios-plugins-2.2.1')
    os.system('sudo ./configure --with-nagios-user=nagios --with-nagios-group=nagios --with-openssl')
    os.system('sudo ')
    os.system('sudo make install')
    print("done!")
    window.destroy()
    exit()
def second_mon():
    print("unistalling nagios...")
    os.system('sudo apt-get remove nagios-agent')
    os.system('sudo apt-get --purge autoremove nagios-agent')
    os.system('sudo apt-get update')
    os.system('apt-get --check upgrade')
    print("done!")
    window.destroy()
    exit()
def third_mon():
    print("starting configuration on nagios")
    os.system('cd nagios-4.4.5/')
    os.system('./configure --with-command-group=nagcmd')
    os.system('sudo make all')
    os.system('sudo make install')
    os.system('sudo make install-init')
    os.system('sudo make install-commandmode')
    os.system('sudo make install-config')
    os.system('sudo vi /usr/local/nagios/etc/objects/contacts.cfg')
    os.system('sudo make install-webconf')
    os.system('sudo /usr/local/nagios/bin/nagios-v/usr/local/nagios/etc/nagios.cfg')
    print("done!")
    window.destroy()
    exit()
def first_aws():
    ec2 = boto3.resource('ec2')

    instances = ec2.create_instances(
        ImageId='ami-0bbe28eb2173f6167',
        MinCount=1,
        MaxCount=int(input("enter how many instances do you want:\n")),
        InstanceType='t2.micro',
        KeyName=input("enter your keyname:\n")
    )
    window.destroy()
    exit()
def second_aws():
    instances = input("enter the ids of the instances that you want to destroy:\n")
    ids = [instances]
    ec2 = boto3.resource('ec2')

    ec2.instances.filter(InstanceIds=ids).terminate()
    window.destroy()
    exit()
def third_aws():
    instances = input("enter the ids of the instance that you want to stop:\n")
    ids = [instances]
    ec2 = boto3.resource('ec2')
    ec2.instances.filter(InstanceIds=ids).stop()
    window.destroy()
    exit()
def fourth_aws():
    instances = input("enter the ids of the instance that you want to start:\n")
    ids = [instances]
    ec2 = boto3.client('ec2')
    ec2.start_instances(InstanceIds=ids)
    window.destroy()
    exit()
def fifth_aws():
    client = boto3.client('ec2')
    response = client.describe_instances()
    for r in response['Reservations']:
        for i in r['Instances']:
            print("ID: " + i['InstanceId'] + "\nIP Address: " + i['PublicIpAddress'] + "\n---------------------------------------")
    window.destroy()
    exit()

    
def close_window():
    window.destroy()
    exit()


window = Tk()
window.geometry("1600x900")
window.title("NET4U")
window.configure(background="green")


Label(window, text="\nWELCOME TO MY PROJECT MENU! :)", width=60, bg="green", fg="black", font="verdana 30 italic").grid(
    row=1, column=0, sticky='W')
Label(window, text="\n\n\nEnter you choice:\n1.AWS\n2.MONITORING\n3.DOCKERS\n4.INIT-SERVICES\n5.ANSIBLE\n", width=60,
      bg="green", fg="black", font="verdana 30 italic").grid(row=7, column=0, sticky='W')


textentry = Entry(window, width=40, bg="white", font="none 15 italic")
textentry.grid(row=9, column=0, sticky=S)


Button(window, text="SUBMIT", width=14, command=click, font="none 12 italic").grid(row=11, column=0, sticky=S)
Button(window, text="EXIT", width=14, command=close_window, font="none 12 italic").grid(row=13, column=0, sticky=S)



window.mainloop()
